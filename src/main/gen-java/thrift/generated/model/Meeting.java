/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-03-26")
public class Meeting implements org.apache.thrift.TBase<Meeting, Meeting._Fields>, java.io.Serializable, Cloneable, Comparable<Meeting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Meeting");

  private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEDULE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule_user", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STARTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RES_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("resResult", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeetingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeetingTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String meetingId; // optional
  public @org.apache.thrift.annotation.Nullable String userName; // optional
  public @org.apache.thrift.annotation.Nullable String schedule_user; // optional
  public int startime; // optional
  public int endtime; // optional
  public @org.apache.thrift.annotation.Nullable String status; // optional
  public @org.apache.thrift.annotation.Nullable ResResult resResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEETING_ID((short)1, "meetingId"),
    USER_NAME((short)2, "userName"),
    SCHEDULE_USER((short)3, "schedule_user"),
    STARTIME((short)4, "startime"),
    ENDTIME((short)5, "endtime"),
    STATUS((short)6, "status"),
    RES_RESULT((short)7, "resResult");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEETING_ID
          return MEETING_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // SCHEDULE_USER
          return SCHEDULE_USER;
        case 4: // STARTIME
          return STARTIME;
        case 5: // ENDTIME
          return ENDTIME;
        case 6: // STATUS
          return STATUS;
        case 7: // RES_RESULT
          return RES_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEETING_ID,_Fields.USER_NAME,_Fields.SCHEDULE_USER,_Fields.STARTIME,_Fields.ENDTIME,_Fields.STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SCHEDULE_USER, new org.apache.thrift.meta_data.FieldMetaData("schedule_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.STARTIME, new org.apache.thrift.meta_data.FieldMetaData("startime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.RES_RESULT, new org.apache.thrift.meta_data.FieldMetaData("resResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ResResult")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Meeting.class, metaDataMap);
  }

  public Meeting() {
  }

  public Meeting(
    ResResult resResult)
  {
    this();
    this.resResult = resResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Meeting(Meeting other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMeetingId()) {
      this.meetingId = other.meetingId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetSchedule_user()) {
      this.schedule_user = other.schedule_user;
    }
    this.startime = other.startime;
    this.endtime = other.endtime;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetResResult()) {
      this.resResult = new ResResult(other.resResult);
    }
  }

  public Meeting deepCopy() {
    return new Meeting(this);
  }

  @Override
  public void clear() {
    this.meetingId = null;
    this.userName = null;
    this.schedule_user = null;
    setStartimeIsSet(false);
    this.startime = 0;
    setEndtimeIsSet(false);
    this.endtime = 0;
    this.status = null;
    this.resResult = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getMeetingId() {
    return this.meetingId;
  }

  public Meeting setMeetingId(@org.apache.thrift.annotation.Nullable String meetingId) {
    this.meetingId = meetingId;
    return this;
  }

  public void unsetMeetingId() {
    this.meetingId = null;
  }

  /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingId() {
    return this.meetingId != null;
  }

  public void setMeetingIdIsSet(boolean value) {
    if (!value) {
      this.meetingId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getUserName() {
    return this.userName;
  }

  public Meeting setUserName(@org.apache.thrift.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getSchedule_user() {
    return this.schedule_user;
  }

  public Meeting setSchedule_user(@org.apache.thrift.annotation.Nullable String schedule_user) {
    this.schedule_user = schedule_user;
    return this;
  }

  public void unsetSchedule_user() {
    this.schedule_user = null;
  }

  /** Returns true if field schedule_user is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule_user() {
    return this.schedule_user != null;
  }

  public void setSchedule_userIsSet(boolean value) {
    if (!value) {
      this.schedule_user = null;
    }
  }

  public int getStartime() {
    return this.startime;
  }

  public Meeting setStartime(int startime) {
    this.startime = startime;
    setStartimeIsSet(true);
    return this;
  }

  public void unsetStartime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTIME_ISSET_ID);
  }

  /** Returns true if field startime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTIME_ISSET_ID);
  }

  public void setStartimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTIME_ISSET_ID, value);
  }

  public int getEndtime() {
    return this.endtime;
  }

  public Meeting setEndtime(int endtime) {
    this.endtime = endtime;
    setEndtimeIsSet(true);
    return this;
  }

  public void unsetEndtime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndtimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getStatus() {
    return this.status;
  }

  public Meeting setStatus(@org.apache.thrift.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ResResult getResResult() {
    return this.resResult;
  }

  public Meeting setResResult(@org.apache.thrift.annotation.Nullable ResResult resResult) {
    this.resResult = resResult;
    return this;
  }

  public void unsetResResult() {
    this.resResult = null;
  }

  /** Returns true if field resResult is set (has been assigned a value) and false otherwise */
  public boolean isSetResResult() {
    return this.resResult != null;
  }

  public void setResResultIsSet(boolean value) {
    if (!value) {
      this.resResult = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MEETING_ID:
      if (value == null) {
        unsetMeetingId();
      } else {
        setMeetingId((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case SCHEDULE_USER:
      if (value == null) {
        unsetSchedule_user();
      } else {
        setSchedule_user((String)value);
      }
      break;

    case STARTIME:
      if (value == null) {
        unsetStartime();
      } else {
        setStartime((Integer)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case RES_RESULT:
      if (value == null) {
        unsetResResult();
      } else {
        setResResult((ResResult)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEETING_ID:
      return getMeetingId();

    case USER_NAME:
      return getUserName();

    case SCHEDULE_USER:
      return getSchedule_user();

    case STARTIME:
      return getStartime();

    case ENDTIME:
      return getEndtime();

    case STATUS:
      return getStatus();

    case RES_RESULT:
      return getResResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEETING_ID:
      return isSetMeetingId();
    case USER_NAME:
      return isSetUserName();
    case SCHEDULE_USER:
      return isSetSchedule_user();
    case STARTIME:
      return isSetStartime();
    case ENDTIME:
      return isSetEndtime();
    case STATUS:
      return isSetStatus();
    case RES_RESULT:
      return isSetResResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Meeting)
      return this.equals((Meeting)that);
    return false;
  }

  public boolean equals(Meeting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_meetingId = true && this.isSetMeetingId();
    boolean that_present_meetingId = true && that.isSetMeetingId();
    if (this_present_meetingId || that_present_meetingId) {
      if (!(this_present_meetingId && that_present_meetingId))
        return false;
      if (!this.meetingId.equals(that.meetingId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_schedule_user = true && this.isSetSchedule_user();
    boolean that_present_schedule_user = true && that.isSetSchedule_user();
    if (this_present_schedule_user || that_present_schedule_user) {
      if (!(this_present_schedule_user && that_present_schedule_user))
        return false;
      if (!this.schedule_user.equals(that.schedule_user))
        return false;
    }

    boolean this_present_startime = true && this.isSetStartime();
    boolean that_present_startime = true && that.isSetStartime();
    if (this_present_startime || that_present_startime) {
      if (!(this_present_startime && that_present_startime))
        return false;
      if (this.startime != that.startime)
        return false;
    }

    boolean this_present_endtime = true && this.isSetEndtime();
    boolean that_present_endtime = true && that.isSetEndtime();
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (this.endtime != that.endtime)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_resResult = true && this.isSetResResult();
    boolean that_present_resResult = true && that.isSetResResult();
    if (this_present_resResult || that_present_resResult) {
      if (!(this_present_resResult && that_present_resResult))
        return false;
      if (!this.resResult.equals(that.resResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMeetingId()) ? 131071 : 524287);
    if (isSetMeetingId())
      hashCode = hashCode * 8191 + meetingId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
    if (isSetUserName())
      hashCode = hashCode * 8191 + userName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchedule_user()) ? 131071 : 524287);
    if (isSetSchedule_user())
      hashCode = hashCode * 8191 + schedule_user.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartime()) ? 131071 : 524287);
    if (isSetStartime())
      hashCode = hashCode * 8191 + startime;

    hashCode = hashCode * 8191 + ((isSetEndtime()) ? 131071 : 524287);
    if (isSetEndtime())
      hashCode = hashCode * 8191 + endtime;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetResResult()) ? 131071 : 524287);
    if (isSetResResult())
      hashCode = hashCode * 8191 + resResult.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Meeting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedule_user()).compareTo(other.isSetSchedule_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule_user, other.schedule_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartime()).compareTo(other.isSetStartime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startime, other.startime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResResult()).compareTo(other.isSetResResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resResult, other.resResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Meeting(");
    boolean first = true;

    if (isSetMeetingId()) {
      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetSchedule_user()) {
      if (!first) sb.append(", ");
      sb.append("schedule_user:");
      if (this.schedule_user == null) {
        sb.append("null");
      } else {
        sb.append(this.schedule_user);
      }
      first = false;
    }
    if (isSetStartime()) {
      if (!first) sb.append(", ");
      sb.append("startime:");
      sb.append(this.startime);
      first = false;
    }
    if (isSetEndtime()) {
      if (!first) sb.append(", ");
      sb.append("endtime:");
      sb.append(this.endtime);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("resResult:");
    if (this.resResult == null) {
      sb.append("null");
    } else {
      sb.append(this.resResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeetingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeetingStandardScheme getScheme() {
      return new MeetingStandardScheme();
    }
  }

  private static class MeetingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Meeting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEETING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingId = iprot.readString();
              struct.setMeetingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schedule_user = iprot.readString();
              struct.setSchedule_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startime = iprot.readI32();
              struct.setStartimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endtime = iprot.readI32();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RES_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resResult = new ResResult();
              struct.resResult.read(iprot);
              struct.setResResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Meeting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.meetingId != null) {
        if (struct.isSetMeetingId()) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schedule_user != null) {
        if (struct.isSetSchedule_user()) {
          oprot.writeFieldBegin(SCHEDULE_USER_FIELD_DESC);
          oprot.writeString(struct.schedule_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartime()) {
        oprot.writeFieldBegin(STARTIME_FIELD_DESC);
        oprot.writeI32(struct.startime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndtime()) {
        oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
        oprot.writeI32(struct.endtime);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resResult != null) {
        oprot.writeFieldBegin(RES_RESULT_FIELD_DESC);
        struct.resResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeetingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeetingTupleScheme getScheme() {
      return new MeetingTupleScheme();
    }
  }

  private static class MeetingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Meeting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMeetingId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetSchedule_user()) {
        optionals.set(2);
      }
      if (struct.isSetStartime()) {
        optionals.set(3);
      }
      if (struct.isSetEndtime()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetResResult()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMeetingId()) {
        oprot.writeString(struct.meetingId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetSchedule_user()) {
        oprot.writeString(struct.schedule_user);
      }
      if (struct.isSetStartime()) {
        oprot.writeI32(struct.startime);
      }
      if (struct.isSetEndtime()) {
        oprot.writeI32(struct.endtime);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetResResult()) {
        struct.resResult.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.meetingId = iprot.readString();
        struct.setMeetingIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schedule_user = iprot.readString();
        struct.setSchedule_userIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startime = iprot.readI32();
        struct.setStartimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endtime = iprot.readI32();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.resResult = new ResResult();
        struct.resResult.read(iprot);
        struct.setResResultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

